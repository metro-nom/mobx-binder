{"version":3,"sources":["webpack:///./src/docz/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","to","isMDXComponent"],"mappings":"qQASaA,G,UAAe,S,oMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,2FAA0E,6BAAGC,WAAW,KAAQ,CAC5F,KAAQ,yBAD8D,SAA1E,MAEyB,6BAAGA,WAAW,KAAQ,CAC3C,KAAQ,yBADa,QAFzB,aAKA,mDAAkC,6BAAGA,WAAW,KAAQ,CACpD,KAAQ,uFADsB,sCAAlC,8CAGA,yCAAwB,6BAAGA,WAAW,KAAQ,CAC1C,KAAQ,oCADY,cAAxB,6EAEqG,kBAAIA,WAAW,KAAf,QAFrG,mBAGA,sBACE,kBAAIA,WAAW,MAAf,aAAkC,6BAAGA,WAAW,MAAS,CACrD,KAAQ,wBADsB,UAGlC,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,8BAAmD,6BAAGA,WAAW,MAAS,CACtE,KAAQ,iCADuC,cAAnD,sBAGA,kBAAIA,WAAW,MAAf,iCACE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,oBACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,4BAGJ,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,iCAAsD,6BAAGA,WAAW,MAAS,CACzE,KAAQ,yBAD0C,aAAtD,QAE+B,6BAAGA,WAAW,MAAS,CAClD,KAAQ,uBADmB,WAG/B,kBAAIA,WAAW,MAAf,sBAEF,iBAAQ,CACN,GAAM,iBADR,iBAGA,0BAAK,YAAC,IAAD,CAASC,GAAG,8CAA8CF,QAAQ,WAAlE,UAAL,6GAA2M,YAAC,IAAD,CAASE,GAAG,kDAAkDF,QAAQ,WAAtE,cAA3M,4DACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,k/CA6CL,sBACE,kBAAIA,WAAW,MAAf,8HACA,kBAAIA,WAAW,MAAf,yDAA8E,6BAAGA,WAAW,MAAS,CACjG,KAAQ,kDADkE,mBAA9E,gDAGA,kBAAIA,WAAW,MAAf,4GACA,kBAAIA,WAAW,MAAf,yDAA8E,6BAAGA,WAAW,MAAS,CACjG,KAAQ,eADkE,oCAA9E,MAIF,iCAAY,YAAC,IAAD,CAASC,GAAG,qCAAqCF,QAAQ,WAAzD,WAAZ,qDAAkJ,YAAC,IAAD,CAASE,GAAG,SAASF,QAAQ,WAA7B,eAAlJ,W,kMAKJH,EAAWM,gBAAiB","file":"component---src-docz-index-mdx-c913986f31f892f8dba9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/carsten/Entwicklung/Projekte/metro/data/mobx-binder/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport SrcLink from './SrcLink';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h1>\n    <p>{`This library provides a convenient way of handling form state in a `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`React`}</a>{` + `}<a parentName=\"p\" {...{\n        \"href\": \"https://mobx.js.org/\"\n      }}>{`MobX`}</a>{` web app.`}</p>\n    <p>{`The API is inspired by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://vaadin.com/docs/v10/flow/binding-data/tutorial-flow-components-binder.html\"\n      }}>{`Binder API of the Vaadin Framework`}</a>{`, while strongly relying on MobX features.`}</p>\n    <p>{`It is written in `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/\"\n      }}>{`TypeScript`}</a>{` and has first class support for TypeScript code, but should also work in `}<em parentName=\"p\">{`ES 5`}</em>{`+ environments.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Built for `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org\"\n        }}>{`React`}</a></li>\n      <li parentName=\"ul\">{`Widget framework agnostic`}</li>\n      <li parentName=\"ul\">{`Example implementation for `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactstrap.github.io\"\n        }}>{`reactstrap`}</a>{` in the sample app`}</li>\n      <li parentName=\"ul\">{`Supports various MobX versions`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`v1.x:`}</strong>{` supports MobX 6`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`v0.x:`}</strong>{` supports MobX 4 and 5`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Chaining Concept for validations and conversions`}</li>\n      <li parentName=\"ul\">{`Localization support for error messages`}</li>\n      <li parentName=\"ul\">{`Async field validation and conversion`}</li>\n      <li parentName=\"ul\">{`Validators and converters for `}<a parentName=\"li\" {...{\n          \"href\": \"https://momentjs.com\"\n        }}>{`Moment.js`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"https://day.js.org\"\n        }}>{`Day.js`}</a></li>\n      <li parentName=\"ul\">{`Promise based API`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h2>\n    <p>A <SrcLink to=\"mobx-binder-core/src/model/binder/Binder.ts\" mdxType=\"SrcLink\">Binder</SrcLink> manages form state for a set of fields represented by \"dumb\" observable field instances implementing the <SrcLink to=\"mobx-binder-core/src/model/fields/FieldStore.ts\" mdxType=\"SrcLink\">FieldStore</SrcLink> interface. It is configured via a fluent api like this:</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { DefaultBinder, TextField, EmailValidator } from 'mobx-binder'\nimport { MomentConverter } from 'mobx-binder-moment'\nimport { TranslateFunction } from 'react-mobx-i18n'\n\nexport default class ProfileStore {\n    public salutation = new TextField('salutation')\n    public fullName = new TextField('fullName')\n    public dateOfBirth = new TextField('dateOfBirth')\n    public email = new TextField('email')\n    public phoneNumber = new TextField('phoneNumber')\n\n    public binder: DefaultBinder\n\n    constructor(private personStore: PersonStore,\n                t: TranslateFunction) {\n\n        this.binder = new DefaultBinder({ t })\n        this.binder\n            .forStringField(this.salutation).isRequired().bind()\n            .forStringField(this.fullName).isRequired().bind()\n\n            .forStringField(this.dateOfBirth).withConverter(new MomentConverter('DD.MM.YYYY')).bind()\n\n            .forStringField(this.email)\n                .isRequired()\n                .withAsyncValidator(\n                    (value) => sleep(1000).then(() => EmailValidator.validate()(value)),\n                    { onBlur: true })\n                .onChange(() => {\n                    console.info('Email changed')\n                })\n                .bind()\n\n            .forField(this.phoneNumber).bind()\n\n        binder.load({\n            fullName: 'Max Mustermann',\n            email: 'max.mustermann@no-reply.com',\n            dateOfBirth: moment('1995-06-11')\n        })\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`These fields store all state needed to render the corresponding field view. All the properties are observable or computed.`}</li>\n      <li parentName=\"ul\">{`The Binder needs a translation function. We are using `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/jverhoelen/react-mobx-i18n\"\n        }}>{`react-mobx-i18n`}</a>{` which provides a compatible implementation.`}</li>\n      <li parentName=\"ul\">{`Each field gets registered with the Binder, configuring the validator and converter chain as neccessary.`}</li>\n      <li parentName=\"ul\">{`Load initial values via simple object properties (see `}<a parentName=\"li\" {...{\n          \"href\": \"#bind-load\"\n        }}>{`Loading and storing field values`}</a>{`)`}</li>\n    </ul>\n    <p>A simple <SrcLink to=\"sample/src/app/forms/FormField.tsx\" mdxType=\"SrcLink\">example</SrcLink> of how to render such fields can be found in the <SrcLink to=\"sample\" mdxType=\"SrcLink\">sample code</SrcLink>.</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}