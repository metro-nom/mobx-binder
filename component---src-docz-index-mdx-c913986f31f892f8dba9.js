(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"agp+":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n("cxan"),i=n("+wNj"),r=(n("ERkP"),n("ZVZ0")),o=n("9Rvw"),l=n("gm7z"),b=(n("l1C2"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docz/index.mdx"}});var c={_frontmatter:b},s=o.a;function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(s,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"overview"},"Overview"),Object(r.b)("p",null,"This library provides a convenient way of handling form state in a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"React")," + ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://mobx.js.org/"}),"MobX")," web app."),Object(r.b)("p",null,"The API is inspired by the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://vaadin.com/docs/v10/flow/binding-data/tutorial-flow-components-binder.html"}),"Binder API of the Vaadin Framework"),", while strongly relying on MobX features."),Object(r.b)("p",null,"It is written in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/"}),"TypeScript")," and has first class support for TypeScript code, but should also work in ",Object(r.b)("em",{parentName:"p"},"ES 5"),"+ environments."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Built for ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://reactjs.org"}),"React")),Object(r.b)("li",{parentName:"ul"},"Widget framework agnostic"),Object(r.b)("li",{parentName:"ul"},"Example implementation for ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://reactstrap.github.io"}),"reactstrap")," in the sample app"),Object(r.b)("li",{parentName:"ul"},"Supports various MobX versions",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"v1.x:")," supports MobX 6"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"v0.x:")," supports MobX 4 and 5"))),Object(r.b)("li",{parentName:"ul"},"Chaining Concept for validations and conversions"),Object(r.b)("li",{parentName:"ul"},"Localization support for error messages"),Object(r.b)("li",{parentName:"ul"},"Async field validation and conversion"),Object(r.b)("li",{parentName:"ul"},"Validators and converters for ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://momentjs.com"}),"Moment.js")," and ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://day.js.org"}),"Day.js")),Object(r.b)("li",{parentName:"ul"},"Promise based API")),Object(r.b)("h2",{id:"basic-example"},"Basic Example"),Object(r.b)("p",null,"A ",Object(r.b)(l.a,{to:"mobx-binder-core/src/model/binder/Binder.ts",mdxType:"SrcLink"},"Binder"),' manages form state for a set of fields represented by "dumb" observable field instances implementing the ',Object(r.b)(l.a,{to:"mobx-binder-core/src/model/fields/FieldStore.ts",mdxType:"SrcLink"},"FieldStore")," interface. It is configured via a fluent api like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { DefaultBinder, TextField, EmailValidator } from 'mobx-binder'\nimport { MomentConverter } from 'mobx-binder-moment'\nimport { TranslateFunction } from 'react-mobx-i18n'\n\nexport default class ProfileStore {\n    public salutation = new TextField('salutation')\n    public fullName = new TextField('fullName')\n    public dateOfBirth = new TextField('dateOfBirth')\n    public email = new TextField('email')\n    public phoneNumber = new TextField('phoneNumber')\n\n    public binder: DefaultBinder\n\n    constructor(private personStore: PersonStore,\n                t: TranslateFunction) {\n\n        this.binder = new DefaultBinder({ t })\n        this.binder\n            .forStringField(this.salutation).isRequired().bind()\n            .forStringField(this.fullName).isRequired().bind()\n\n            .forStringField(this.dateOfBirth).withConverter(new MomentConverter('DD.MM.YYYY')).bind()\n\n            .forStringField(this.email)\n                .isRequired()\n                .withAsyncValidator(\n                    (value) => sleep(1000).then(() => EmailValidator.validate()(value)),\n                    { onBlur: true })\n                .onChange(() => {\n                    console.info('Email changed')\n                })\n                .bind()\n\n            .forField(this.phoneNumber).bind()\n\n        binder.load({\n            fullName: 'Max Mustermann',\n            email: 'max.mustermann@no-reply.com',\n            dateOfBirth: moment('1995-06-11')\n        })\n    }\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"These fields store all state needed to render the corresponding field view. All the properties are observable or computed."),Object(r.b)("li",{parentName:"ul"},"The Binder needs a translation function. We are using ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/jverhoelen/react-mobx-i18n"}),"react-mobx-i18n")," which provides a compatible implementation."),Object(r.b)("li",{parentName:"ul"},"Each field gets registered with the Binder, configuring the validator and converter chain as neccessary."),Object(r.b)("li",{parentName:"ul"},"Load initial values via simple object properties (see ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#bind-load"}),"Loading and storing field values"),")")),Object(r.b)("p",null,"A simple ",Object(r.b)(l.a,{to:"sample/src/app/forms/FormField.tsx",mdxType:"SrcLink"},"example")," of how to render such fields can be found in the ",Object(r.b)(l.a,{to:"sample",mdxType:"SrcLink"},"sample code"),"."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docz/index.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docz-index-mdx-c913986f31f892f8dba9.js.map