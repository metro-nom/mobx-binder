(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{T41E:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return m}));var a=t("cxan"),r=t("+wNj"),i=(t("ERkP"),t("ZVZ0")),s=t("9Rvw"),o=(t("l1C2"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docz/usage/prerequisites.mdx"}});var l={_frontmatter:o},c=s.a;function m(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(c,Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"prerequisites-for-defaultbinder"},"Prerequisites for ",Object(i.b)("em",{parentName:"h1"},"DefaultBinder")),Object(i.b)("h2",{id:"i18n-infrastructure"},"I18n infrastructure"),Object(i.b)("p",null,"To make use of the ",Object(i.b)("em",{parentName:"p"},"DefaultBinder"),", we need a way to translate validation and conversion errors into localized messages."),Object(i.b)("p",null,"For this, you need a ",Object(i.b)("em",{parentName:"p"},"translate")," method, that takes a translation key and arguments and returns the translated message, like"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"t('validations.minLength', { min: 5 }) // returns: 'Please enter at least 5 characters.'\n")),Object(i.b)("h3",{id:"example-using-i18n-harmony"},"Example using i18n-harmony"),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/DarkoKukovec/I18n-harmony"}),"i18n-harmony")," is an i18n library that's using a simplified ES2015 template string syntax."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"\nimport { action, makeObservable, observable } from 'mobx'\nimport i18n from 'i18n-harmony'\nimport { Locales } from './Locales'\nimport { TranslateFunction } from 'mobx-binder'\n\nexport default class I18nStore {\n    public locale = 'en'\n\n    constructor(defaultLocale: string, translations: Locales) {\n        i18n.init({ translations })\n\n        this.locale = defaultLocale\n\n        makeObservable(this, {\n            locale: observable,\n            select: action,\n        })\n    }\n\n    public t: TranslateFunction = (translationKey, args) => i18n.t(translationKey, args, this.locale)\n\n    public select = (newLocale: string) => {\n        this.locale = newLocale\n    }\n}\n")),Object(i.b)("p",null,"To use it, just create a singleton I18nStore and use it's ",Object(i.b)("inlineCode",{parentName:"p"},"t")," method in the Binder:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"\nconst i18n = new I18nStore('en', {\n    en: {\n        'form.fields.fullName': 'Full name',\n        'form.fields.dateOfBirth': 'Date of birth',\n        'form.fields.anotherDate': 'Another date',\n        'form.fields.phoneNumber': 'Phone number',\n        'form.fields.email': 'E-mail',\n        'form.fields.toggle': 'Please toggle',\n        'profilePage.saveButton.label': 'Save',\n        'validations.fullName.submissionError': 'The full name seems to be wrong due to server side validation.',\n        'validations.required': 'Please enter something.',\n        'validations.email': 'Please enter a valid email address.',\n        'validations.minLength': 'Please enter at least ${min} characters.',\n        'conversions.error.moment': 'Please enter a valid date.',\n        ...\n    },\n})\n\nconst binder = new DefaultBinder({ t: i18n.t })\n")))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docz/usage/prerequisites.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docz-usage-prerequisites-mdx-13daced59f3d3621119b.js.map