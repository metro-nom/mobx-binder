(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{"l+Bq":function(e,t,i){"use strict";i.r(t),i.d(t,"_frontmatter",(function(){return l})),i.d(t,"default",(function(){return s}));var n=i("cxan"),a=i("+wNj"),o=(i("ERkP"),i("ZVZ0")),r=i("9Rvw"),l=(i("l1C2"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docz/usage/visibility.mdx"}});var d={_frontmatter:l},b=r.a;function s(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)(b,Object(n.a)({},d,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"conditional-visibility"},"Conditional visibility"),Object(o.b)("p",null,"If a field should be hidden as part of a value change of a different field, it may become necessary to remove that field from the Binder completely, especially if itâ€™s value is currently invalid and would prevent a form submission. Conditional visibility is not directly supported by the framework, but it's possible to remove bindings via ",Object(o.b)("inlineCode",{parentName:"p"},"binder.removeBinding(field)")," and re-add them later using the regular ",Object(o.b)("inlineCode",{parentName:"p"},"binder.forField()"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"binder.removeBinding(fullName)\n")),Object(o.b)("p",null,"This updates the global validation status based on the fields that are left."),Object(o.b)("p",null,"{/",Object(o.b)("em",{parentName:"p"}," TODO add support to re-adding bindings without having to re-build them "),"/}"))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docz/usage/visibility.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docz-usage-visibility-mdx-74450b6420aa2aa3063b.js.map