{"version":3,"sources":["webpack:///./src/docz/usage/load-store.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,iBAAQ,CACN,GAAM,eADR,kBAGA,4BAAW,0BAAYC,WAAW,KAAvB,UAAX,mMACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gcAgBL,iBAAQ,CACN,GAAM,gBADR,mBAGA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,yCAAuG,0BAAYA,WAAW,KAAvB,SAAvG,+KACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0iBAqBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,0KAAyJ,0BAAYA,WAAW,KAAvB,iBAAzJ,mBAAsO,0BAAYA,WAAW,KAAvB,WAAtO,uCACA,yGAAwF,0BAAYA,WAAW,KAAvB,sBAAxF,YACA,wDAAuC,0BAAYA,WAAW,KAAvB,WAAvC,mEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,shB,6MA2BTJ,EAAWK,gBAAiB","file":"component---src-docz-usage-load-store-mdx-c721700408be6b15814b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/carsten/Entwicklung/Projekte/metro/data/mobx-binder/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"loading-and-storing-field-values\"\n    }}>{`Loading and storing field values`}</h1>\n    <h2 {...{\n      \"id\": \"-using-bind\"\n    }}>{`… using bind()`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`bind()`}</inlineCode>{` method binds the value of a form field to a property named like the field name. Only valid values are stored. If the field binding chain contains a conversion, the converted value is stored.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public fullName = new TextField('fullName')\n...\nbinder.forField(fullName).bind()\n\n// loading from object\nbinder.load({ fullName: 'Max Mustermann' }) // => fullName.value === 'Max Mustermann'\n\n// storing to object\nconst values = binder.store() // values === { fullName: 'Max Mustermann' }\n\n// storing to existing object\nconst values = { foo: 'bar' }\nbinder.store(values) // =>  values == { foo: 'bar', fullName: 'Max Mustermann' }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-bind2\"\n    }}>{`… using bind2()`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`bind()`}</inlineCode>{` command is a shorthand for a call to `}<inlineCode parentName=\"p\">{`bind2`}</inlineCode>{`, which allows to bind field values using more complex read and write callbacks. It's possible to omit the write callback, in which case the field is handled as read-only.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public fullName = new TextField('fullName')\n...\nbinder.forField(fullName).bind2(\n    source => source.businessRelation.person.fullName,\n    (target, newValue) => target.businessRelation.person.fullName = newValue)\n)\n\nconst account = {\n    businessRelation: {\n        person: { fullName: 'Max Mustermann' }\n    }\n}\n\n// loading account data into fields\nbinder.load(account) // => fullName.value === 'Max Mustermann'\n\n// updating account data\nbinder.store(account) // =>  account.businessRelation.person.fullName === 'Max Mustermann'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"handling-changes\"\n    }}>{`Handling changes`}</h2>\n    <p>{`When you load() data, all the field values get a new value, which is internally stored as \"unchanged\". Only if the field value is changing via an `}<inlineCode parentName=\"p\">{`updateValue()`}</inlineCode>{` operation, the `}<inlineCode parentName=\"p\">{`changed`}</inlineCode>{` property on field level gets true.`}</p>\n    <p>{`You can get a backend object only filled with data that has been changed via the `}<inlineCode parentName=\"p\">{`Binder.changedData`}</inlineCode>{` getter.`}</p>\n    <p>{`In combination with the Binders `}<inlineCode parentName=\"p\">{`apply()`}</inlineCode>{` method it’s possible to find changes between two sets of data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public fullName = new TextField('fullName')\npublic email = new TextField('email')\n...\nbinder\n    .forStringField(fullName).bind()\n    .forStringField(email).bind()\n\n// loading from object\nbinder.load({\n    fullName: 'Max Mustermann',\n    email: 'max.mustermann@codecentric.de'\n})\n\n// applying new set of data as field changes\nbinder.apply({\n    fullName: 'Max Mustermann-Musterfrau',\n    email: 'max.mustermann@codecentric.de'\n})\n\n// binder.changedData returns { fullName: 'Max Mustermann-Musterfrau' }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}