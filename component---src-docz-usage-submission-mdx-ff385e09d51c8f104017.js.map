{"version":3,"sources":["webpack:///./src/docz/usage/submission.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,sFAAqE,0BAAYC,WAAW,KAAvB,mBAArE,oBAAqJ,0BAAYA,WAAW,KAAvB,kBAArJ,mJACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oJAQL,yDAAwC,0BAAYA,WAAW,KAAvB,qBAAxC,8PACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oLAOL,wEAAuD,0BAAYA,WAAW,KAAvB,eAAvD,mE,6MAKJJ,EAAWK,gBAAiB","file":"component---src-docz-usage-submission-mdx-ff385e09d51c8f104017.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/carsten/Entwicklung/Projekte/metro/data/mobx-binder/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"submission\"\n    }}>{`Submission`}</h1>\n    <p>{`If the submit button of a form is clicked, this may trigger a `}<inlineCode parentName=\"p\">{`binder.submit()`}</inlineCode>{` call. Just like `}<inlineCode parentName=\"p\">{`binder.store()`}</inlineCode>{`, it stores the form field values into an object, but it also waits for asynchronous validations to be finished and maintains submission state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public handleSubmit() {\n    return this.binder.submit()\n        .then(() => /* success */)\n        .catch(() => /* validation error */)\n}\n`}</code></pre>\n    <p>{`The submit() methods maintains a `}<inlineCode parentName=\"p\">{`binder.submitting`}</inlineCode>{` property, indicating that submission of the form is still in progress. To make use of it, asynchronous follow actions have to be specified as parameter, so that the binder can still indicate submission as long as the server request is still ongoing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public handleSubmit() {\n    return this.binder.submit({}, results => this.sendResultsToServer(results))\n        .catch(() => /* validation or other submission error */)\n}\n`}</code></pre>\n    <p>{`If a field related validation error occurs, the `}<inlineCode parentName=\"p\">{`err.message`}</inlineCode>{` is empty, es it may contain some \"global\" error message.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}