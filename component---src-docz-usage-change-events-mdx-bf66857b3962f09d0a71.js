(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{D613:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return r})),t.d(n,"default",(function(){return b}));var a=t("cxan"),o=t("+wNj"),i=(t("ERkP"),t("ZVZ0")),l=t("9Rvw"),r=(t("l1C2"),{});void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docz/usage/change-events.mdx"}});var s={_frontmatter:r},c=l.a;function b(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)(c,Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"change-events"},"Change events"),Object(i.b)("p",null,"Usually, to get aware of changes to field values, you might just want to observe them by yourself via the standard MobX mechanisms. But in some scenarios it might also be helpful to use the onChange() method."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"public salutation = new TextField('salutation')\npublic fullName = new TextField('fullName')\n\nbinder\n    .forStringField(salutation)\n    .isRequired()\n    .withConverter(new MomentConverter('DD.MM.YYYY'))\n    .onChange(moment => console.log(moment.format()))\n    .bind()\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"onChange")," events will only be fired if all validators specified before have been succeeding. It will pass a valid value of a type depending on the position of the ",Object(i.b)("inlineCode",{parentName:"p"},"onChange()")," call in the chain."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docz/usage/change-events.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docz-usage-change-events-mdx-bf66857b3962f09d0a71.js.map