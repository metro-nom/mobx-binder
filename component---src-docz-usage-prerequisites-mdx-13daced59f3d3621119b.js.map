{"version":3,"sources":["webpack:///./src/docz/usage/prerequisites.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mCADR,qBAEyB,kBAAIC,WAAW,MAAf,kBACzB,iBAAQ,CACN,GAAM,uBADR,uBAGA,2CAA0B,kBAAIA,WAAW,KAAf,iBAA1B,0FACA,6CAA4B,kBAAIA,WAAW,KAAf,aAA5B,gGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+FAIL,iBAAQ,CACN,GAAM,8BADR,8BAGA,qBAAG,6BAAGA,WAAW,KAAQ,CACrB,KAAQ,iDADT,gBAAH,gFAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6rBA6BL,kFAAiE,0BAAYA,WAAW,KAAvB,KAAjE,0BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,i2B,gNA2BTJ,EAAWK,gBAAiB","file":"component---src-docz-usage-prerequisites-mdx-13daced59f3d3621119b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/carsten/Entwicklung/Projekte/metro/data/mobx-binder/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"prerequisites-for-defaultbinder\"\n    }}>{`Prerequisites for `}<em parentName=\"h1\">{`DefaultBinder`}</em></h1>\n    <h2 {...{\n      \"id\": \"i18n-infrastructure\"\n    }}>{`I18n infrastructure`}</h2>\n    <p>{`To make use of the `}<em parentName=\"p\">{`DefaultBinder`}</em>{`, we need a way to translate validation and conversion errors into localized messages.`}</p>\n    <p>{`For this, you need a `}<em parentName=\"p\">{`translate`}</em>{` method, that takes a translation key and arguments and returns the translated message, like`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`t('validations.minLength', { min: 5 }) // returns: 'Please enter at least 5 characters.'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-using-i18n-harmony\"\n    }}>{`Example using i18n-harmony`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/DarkoKukovec/I18n-harmony\"\n      }}>{`i18n-harmony`}</a>{` is an i18n library that's using a simplified ES2015 template string syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`\nimport { action, makeObservable, observable } from 'mobx'\nimport i18n from 'i18n-harmony'\nimport { Locales } from './Locales'\nimport { TranslateFunction } from 'mobx-binder'\n\nexport default class I18nStore {\n    public locale = 'en'\n\n    constructor(defaultLocale: string, translations: Locales) {\n        i18n.init({ translations })\n\n        this.locale = defaultLocale\n\n        makeObservable(this, {\n            locale: observable,\n            select: action,\n        })\n    }\n\n    public t: TranslateFunction = (translationKey, args) => i18n.t(translationKey, args, this.locale)\n\n    public select = (newLocale: string) => {\n        this.locale = newLocale\n    }\n}\n`}</code></pre>\n    <p>{`To use it, just create a singleton I18nStore and use it's `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` method in the Binder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`\nconst i18n = new I18nStore('en', {\n    en: {\n        'form.fields.fullName': 'Full name',\n        'form.fields.dateOfBirth': 'Date of birth',\n        'form.fields.anotherDate': 'Another date',\n        'form.fields.phoneNumber': 'Phone number',\n        'form.fields.email': 'E-mail',\n        'form.fields.toggle': 'Please toggle',\n        'profilePage.saveButton.label': 'Save',\n        'validations.fullName.submissionError': 'The full name seems to be wrong due to server side validation.',\n        'validations.required': 'Please enter something.',\n        'validations.email': 'Please enter a valid email address.',\n        'validations.minLength': 'Please enter at least \\${min} characters.',\n        'conversions.error.moment': 'Please enter a valid date.',\n        ...\n    },\n})\n\nconst binder = new DefaultBinder({ t: i18n.t })\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}